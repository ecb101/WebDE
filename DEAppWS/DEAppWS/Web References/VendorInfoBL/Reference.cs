//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
#pragma warning disable 1591

namespace DEAppWS.VendorInfoBL {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="VendorInfoBLSoap", Namespace="http://tempuri.org/")]
    public partial class VendorInfoBL : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback selectVendorInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback isVendorInfoExistingOperationCompleted;
        
        private System.Threading.SendOrPostCallback isBillToExistingOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBatLocIdRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLocIdBlngOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectVendorInfoCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectBillToCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback addVendorInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback addBillToOperationCompleted;
        
        private System.Threading.SendOrPostCallback isVendorInfoContentsEqualOperationCompleted;
        
        private System.Threading.SendOrPostCallback isBillToContentsEqualOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public VendorInfoBL() {
            this.Url = global::DEAppWS.Properties.Settings.Default.DEAppWS_VendorInfoBL_VendorInfoBL;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event selectVendorInfoCompletedEventHandler selectVendorInfoCompleted;
        
        /// <remarks/>
        public event isVendorInfoExistingCompletedEventHandler isVendorInfoExistingCompleted;
        
        /// <remarks/>
        public event isBillToExistingCompletedEventHandler isBillToExistingCompleted;
        
        /// <remarks/>
        public event getBatLocIdRemitCompletedEventHandler getBatLocIdRemitCompleted;
        
        /// <remarks/>
        public event getLocIdBlngCompletedEventHandler getLocIdBlngCompleted;
        
        /// <remarks/>
        public event selectVendorInfoCountCompletedEventHandler selectVendorInfoCountCompleted;
        
        /// <remarks/>
        public event selectBillToCountCompletedEventHandler selectBillToCountCompleted;
        
        /// <remarks/>
        public event addVendorInfoCompletedEventHandler addVendorInfoCompleted;
        
        /// <remarks/>
        public event addBillToCompletedEventHandler addBillToCompleted;
        
        /// <remarks/>
        public event isVendorInfoContentsEqualCompletedEventHandler isVendorInfoContentsEqualCompleted;
        
        /// <remarks/>
        public event isBillToContentsEqualCompletedEventHandler isBillToContentsEqualCompleted;
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event SelectAllCompletedEventHandler SelectAllCompleted;
        
        /// <remarks/>
        public event GetServerDateCompletedEventHandler GetServerDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectVendorInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectVendorInfo(string SCAC) {
            object[] results = this.Invoke("selectVendorInfo", new object[] {
                        SCAC});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectVendorInfoAsync(string SCAC) {
            this.selectVendorInfoAsync(SCAC, null);
        }
        
        /// <remarks/>
        public void selectVendorInfoAsync(string SCAC, object userState) {
            if ((this.selectVendorInfoOperationCompleted == null)) {
                this.selectVendorInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectVendorInfoOperationCompleted);
            }
            this.InvokeAsync("selectVendorInfo", new object[] {
                        SCAC}, this.selectVendorInfoOperationCompleted, userState);
        }
        
        private void OnselectVendorInfoOperationCompleted(object arg) {
            if ((this.selectVendorInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectVendorInfoCompleted(this, new selectVendorInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isVendorInfoExisting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isVendorInfoExisting(string SCAC, string vendorInfo) {
            object[] results = this.Invoke("isVendorInfoExisting", new object[] {
                        SCAC,
                        vendorInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isVendorInfoExistingAsync(string SCAC, string vendorInfo) {
            this.isVendorInfoExistingAsync(SCAC, vendorInfo, null);
        }
        
        /// <remarks/>
        public void isVendorInfoExistingAsync(string SCAC, string vendorInfo, object userState) {
            if ((this.isVendorInfoExistingOperationCompleted == null)) {
                this.isVendorInfoExistingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisVendorInfoExistingOperationCompleted);
            }
            this.InvokeAsync("isVendorInfoExisting", new object[] {
                        SCAC,
                        vendorInfo}, this.isVendorInfoExistingOperationCompleted, userState);
        }
        
        private void OnisVendorInfoExistingOperationCompleted(object arg) {
            if ((this.isVendorInfoExistingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isVendorInfoExistingCompleted(this, new isVendorInfoExistingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isBillToExisting", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isBillToExisting(string SCAC, string BillTo) {
            object[] results = this.Invoke("isBillToExisting", new object[] {
                        SCAC,
                        BillTo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isBillToExistingAsync(string SCAC, string BillTo) {
            this.isBillToExistingAsync(SCAC, BillTo, null);
        }
        
        /// <remarks/>
        public void isBillToExistingAsync(string SCAC, string BillTo, object userState) {
            if ((this.isBillToExistingOperationCompleted == null)) {
                this.isBillToExistingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisBillToExistingOperationCompleted);
            }
            this.InvokeAsync("isBillToExisting", new object[] {
                        SCAC,
                        BillTo}, this.isBillToExistingOperationCompleted, userState);
        }
        
        private void OnisBillToExistingOperationCompleted(object arg) {
            if ((this.isBillToExistingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isBillToExistingCompleted(this, new isBillToExistingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getBatLocIdRemit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getBatLocIdRemit(string SCAC, string vendorInfo) {
            object[] results = this.Invoke("getBatLocIdRemit", new object[] {
                        SCAC,
                        vendorInfo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBatLocIdRemitAsync(string SCAC, string vendorInfo) {
            this.getBatLocIdRemitAsync(SCAC, vendorInfo, null);
        }
        
        /// <remarks/>
        public void getBatLocIdRemitAsync(string SCAC, string vendorInfo, object userState) {
            if ((this.getBatLocIdRemitOperationCompleted == null)) {
                this.getBatLocIdRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBatLocIdRemitOperationCompleted);
            }
            this.InvokeAsync("getBatLocIdRemit", new object[] {
                        SCAC,
                        vendorInfo}, this.getBatLocIdRemitOperationCompleted, userState);
        }
        
        private void OngetBatLocIdRemitOperationCompleted(object arg) {
            if ((this.getBatLocIdRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBatLocIdRemitCompleted(this, new getBatLocIdRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getLocIdBlng", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getLocIdBlng(string SCAC, string BillTo) {
            object[] results = this.Invoke("getLocIdBlng", new object[] {
                        SCAC,
                        BillTo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getLocIdBlngAsync(string SCAC, string BillTo) {
            this.getLocIdBlngAsync(SCAC, BillTo, null);
        }
        
        /// <remarks/>
        public void getLocIdBlngAsync(string SCAC, string BillTo, object userState) {
            if ((this.getLocIdBlngOperationCompleted == null)) {
                this.getLocIdBlngOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLocIdBlngOperationCompleted);
            }
            this.InvokeAsync("getLocIdBlng", new object[] {
                        SCAC,
                        BillTo}, this.getLocIdBlngOperationCompleted, userState);
        }
        
        private void OngetLocIdBlngOperationCompleted(object arg) {
            if ((this.getLocIdBlngCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLocIdBlngCompleted(this, new getLocIdBlngCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectVendorInfoCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int selectVendorInfoCount(string SCAC) {
            object[] results = this.Invoke("selectVendorInfoCount", new object[] {
                        SCAC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void selectVendorInfoCountAsync(string SCAC) {
            this.selectVendorInfoCountAsync(SCAC, null);
        }
        
        /// <remarks/>
        public void selectVendorInfoCountAsync(string SCAC, object userState) {
            if ((this.selectVendorInfoCountOperationCompleted == null)) {
                this.selectVendorInfoCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectVendorInfoCountOperationCompleted);
            }
            this.InvokeAsync("selectVendorInfoCount", new object[] {
                        SCAC}, this.selectVendorInfoCountOperationCompleted, userState);
        }
        
        private void OnselectVendorInfoCountOperationCompleted(object arg) {
            if ((this.selectVendorInfoCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectVendorInfoCountCompleted(this, new selectVendorInfoCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectBillToCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int selectBillToCount(string SCAC) {
            object[] results = this.Invoke("selectBillToCount", new object[] {
                        SCAC});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void selectBillToCountAsync(string SCAC) {
            this.selectBillToCountAsync(SCAC, null);
        }
        
        /// <remarks/>
        public void selectBillToCountAsync(string SCAC, object userState) {
            if ((this.selectBillToCountOperationCompleted == null)) {
                this.selectBillToCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectBillToCountOperationCompleted);
            }
            this.InvokeAsync("selectBillToCount", new object[] {
                        SCAC}, this.selectBillToCountOperationCompleted, userState);
        }
        
        private void OnselectBillToCountOperationCompleted(object arg) {
            if ((this.selectBillToCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectBillToCountCompleted(this, new selectBillToCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addVendorInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool addVendorInfo(System.Data.DataSet Row) {
            object[] results = this.Invoke("addVendorInfo", new object[] {
                        Row});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addVendorInfoAsync(System.Data.DataSet Row) {
            this.addVendorInfoAsync(Row, null);
        }
        
        /// <remarks/>
        public void addVendorInfoAsync(System.Data.DataSet Row, object userState) {
            if ((this.addVendorInfoOperationCompleted == null)) {
                this.addVendorInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddVendorInfoOperationCompleted);
            }
            this.InvokeAsync("addVendorInfo", new object[] {
                        Row}, this.addVendorInfoOperationCompleted, userState);
        }
        
        private void OnaddVendorInfoOperationCompleted(object arg) {
            if ((this.addVendorInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addVendorInfoCompleted(this, new addVendorInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addBillTo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool addBillTo(System.Data.DataSet Row) {
            object[] results = this.Invoke("addBillTo", new object[] {
                        Row});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void addBillToAsync(System.Data.DataSet Row) {
            this.addBillToAsync(Row, null);
        }
        
        /// <remarks/>
        public void addBillToAsync(System.Data.DataSet Row, object userState) {
            if ((this.addBillToOperationCompleted == null)) {
                this.addBillToOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddBillToOperationCompleted);
            }
            this.InvokeAsync("addBillTo", new object[] {
                        Row}, this.addBillToOperationCompleted, userState);
        }
        
        private void OnaddBillToOperationCompleted(object arg) {
            if ((this.addBillToCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addBillToCompleted(this, new addBillToCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isVendorInfoContentsEqual", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isVendorInfoContentsEqual(System.Data.DataSet vendorInfoContents) {
            object[] results = this.Invoke("isVendorInfoContentsEqual", new object[] {
                        vendorInfoContents});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isVendorInfoContentsEqualAsync(System.Data.DataSet vendorInfoContents) {
            this.isVendorInfoContentsEqualAsync(vendorInfoContents, null);
        }
        
        /// <remarks/>
        public void isVendorInfoContentsEqualAsync(System.Data.DataSet vendorInfoContents, object userState) {
            if ((this.isVendorInfoContentsEqualOperationCompleted == null)) {
                this.isVendorInfoContentsEqualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisVendorInfoContentsEqualOperationCompleted);
            }
            this.InvokeAsync("isVendorInfoContentsEqual", new object[] {
                        vendorInfoContents}, this.isVendorInfoContentsEqualOperationCompleted, userState);
        }
        
        private void OnisVendorInfoContentsEqualOperationCompleted(object arg) {
            if ((this.isVendorInfoContentsEqualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isVendorInfoContentsEqualCompleted(this, new isVendorInfoContentsEqualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isBillToContentsEqual", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isBillToContentsEqual(System.Data.DataSet billToContents) {
            object[] results = this.Invoke("isBillToContentsEqual", new object[] {
                        billToContents});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isBillToContentsEqualAsync(System.Data.DataSet billToContents) {
            this.isBillToContentsEqualAsync(billToContents, null);
        }
        
        /// <remarks/>
        public void isBillToContentsEqualAsync(System.Data.DataSet billToContents, object userState) {
            if ((this.isBillToContentsEqualOperationCompleted == null)) {
                this.isBillToContentsEqualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisBillToContentsEqualOperationCompleted);
            }
            this.InvokeAsync("isBillToContentsEqual", new object[] {
                        billToContents}, this.isBillToContentsEqualOperationCompleted, userState);
        }
        
        private void OnisBillToContentsEqualOperationCompleted(object arg) {
            if ((this.isBillToContentsEqualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isBillToContentsEqualCompleted(this, new isBillToContentsEqualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert(System.Data.DataTable dt) {
            object[] results = this.Invoke("Insert", new object[] {
                        dt});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(System.Data.DataTable dt) {
            this.InsertAsync(dt, null);
        }
        
        /// <remarks/>
        public void InsertAsync(System.Data.DataTable dt, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        dt}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Update(System.Data.DataTable dt) {
            object[] results = this.Invoke("Update", new object[] {
                        dt});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(System.Data.DataTable dt) {
            this.UpdateAsync(dt, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(System.Data.DataTable dt, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        dt}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Delete(string[] primaryKeys, string[] parametersValues) {
            object[] results = this.Invoke("Delete", new object[] {
                        primaryKeys,
                        parametersValues});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(string[] primaryKeys, string[] parametersValues) {
            this.DeleteAsync(primaryKeys, parametersValues, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(string[] primaryKeys, string[] parametersValues, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        primaryKeys,
                        parametersValues}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAll() {
            object[] results = this.Invoke("SelectAll", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllAsync() {
            this.SelectAllAsync(null);
        }
        
        /// <remarks/>
        public void SelectAllAsync(object userState) {
            if ((this.SelectAllOperationCompleted == null)) {
                this.SelectAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllOperationCompleted);
            }
            this.InvokeAsync("SelectAll", new object[0], this.SelectAllOperationCompleted, userState);
        }
        
        private void OnSelectAllOperationCompleted(object arg) {
            if ((this.SelectAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllCompleted(this, new SelectAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServerDate() {
            object[] results = this.Invoke("GetServerDate", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDateAsync() {
            this.GetServerDateAsync(null);
        }
        
        /// <remarks/>
        public void GetServerDateAsync(object userState) {
            if ((this.GetServerDateOperationCompleted == null)) {
                this.GetServerDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDateOperationCompleted);
            }
            this.InvokeAsync("GetServerDate", new object[0], this.GetServerDateOperationCompleted, userState);
        }
        
        private void OnGetServerDateOperationCompleted(object arg) {
            if ((this.GetServerDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDateCompleted(this, new GetServerDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void selectVendorInfoCompletedEventHandler(object sender, selectVendorInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectVendorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectVendorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void isVendorInfoExistingCompletedEventHandler(object sender, isVendorInfoExistingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isVendorInfoExistingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isVendorInfoExistingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void isBillToExistingCompletedEventHandler(object sender, isBillToExistingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isBillToExistingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isBillToExistingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void getBatLocIdRemitCompletedEventHandler(object sender, getBatLocIdRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBatLocIdRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBatLocIdRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void getLocIdBlngCompletedEventHandler(object sender, getLocIdBlngCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLocIdBlngCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLocIdBlngCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void selectVendorInfoCountCompletedEventHandler(object sender, selectVendorInfoCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectVendorInfoCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectVendorInfoCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void selectBillToCountCompletedEventHandler(object sender, selectBillToCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectBillToCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectBillToCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void addVendorInfoCompletedEventHandler(object sender, addVendorInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addVendorInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addVendorInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void addBillToCompletedEventHandler(object sender, addBillToCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addBillToCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addBillToCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void isVendorInfoContentsEqualCompletedEventHandler(object sender, isVendorInfoContentsEqualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isVendorInfoContentsEqualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isVendorInfoContentsEqualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void isBillToContentsEqualCompletedEventHandler(object sender, isBillToContentsEqualCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isBillToContentsEqualCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isBillToContentsEqualCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void InsertCompletedEventHandler(object sender, InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateCompletedEventHandler(object sender, UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SelectAllCompletedEventHandler(object sender, SelectAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetServerDateCompletedEventHandler(object sender, GetServerDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591