//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3615.
// 
#pragma warning disable 1591

namespace DEAppWS.ImageResolutionBL {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ImageResolutionBLSoap", Namespace="http://tempuri.org/")]
    public partial class ImageResolutionBL : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback selectResolutionDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectImagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback implementImageResolutionReceivedOperationCompleted;
        
        private System.Threading.SendOrPostCallback implementImageResolutionManifestingBatchingOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ImageResolutionBL() {
            this.Url = global::DEAppWS.Properties.Settings.Default.DEAppWS_ImageResolutionBL_ImageResolutionBL;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event selectResolutionDescriptionCompletedEventHandler selectResolutionDescriptionCompleted;
        
        /// <remarks/>
        public event selectImagesCompletedEventHandler selectImagesCompleted;
        
        /// <remarks/>
        public event implementImageResolutionReceivedCompletedEventHandler implementImageResolutionReceivedCompleted;
        
        /// <remarks/>
        public event implementImageResolutionManifestingBatchingCompletedEventHandler implementImageResolutionManifestingBatchingCompleted;
        
        /// <remarks/>
        public event GetServerDateCompletedEventHandler GetServerDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectResolutionDescription", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectResolutionDescription() {
            object[] results = this.Invoke("selectResolutionDescription", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectResolutionDescriptionAsync() {
            this.selectResolutionDescriptionAsync(null);
        }
        
        /// <remarks/>
        public void selectResolutionDescriptionAsync(object userState) {
            if ((this.selectResolutionDescriptionOperationCompleted == null)) {
                this.selectResolutionDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectResolutionDescriptionOperationCompleted);
            }
            this.InvokeAsync("selectResolutionDescription", new object[0], this.selectResolutionDescriptionOperationCompleted, userState);
        }
        
        private void OnselectResolutionDescriptionOperationCompleted(object arg) {
            if ((this.selectResolutionDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectResolutionDescriptionCompleted(this, new selectResolutionDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectImages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectImages() {
            object[] results = this.Invoke("selectImages", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectImagesAsync() {
            this.selectImagesAsync(null);
        }
        
        /// <remarks/>
        public void selectImagesAsync(object userState) {
            if ((this.selectImagesOperationCompleted == null)) {
                this.selectImagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectImagesOperationCompleted);
            }
            this.InvokeAsync("selectImages", new object[0], this.selectImagesOperationCompleted, userState);
        }
        
        private void OnselectImagesOperationCompleted(object arg) {
            if ((this.selectImagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectImagesCompleted(this, new selectImagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/implementImageResolutionReceived", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool implementImageResolutionReceived(System.Data.DataTable dt, string systemUserName) {
            object[] results = this.Invoke("implementImageResolutionReceived", new object[] {
                        dt,
                        systemUserName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void implementImageResolutionReceivedAsync(System.Data.DataTable dt, string systemUserName) {
            this.implementImageResolutionReceivedAsync(dt, systemUserName, null);
        }
        
        /// <remarks/>
        public void implementImageResolutionReceivedAsync(System.Data.DataTable dt, string systemUserName, object userState) {
            if ((this.implementImageResolutionReceivedOperationCompleted == null)) {
                this.implementImageResolutionReceivedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimplementImageResolutionReceivedOperationCompleted);
            }
            this.InvokeAsync("implementImageResolutionReceived", new object[] {
                        dt,
                        systemUserName}, this.implementImageResolutionReceivedOperationCompleted, userState);
        }
        
        private void OnimplementImageResolutionReceivedOperationCompleted(object arg) {
            if ((this.implementImageResolutionReceivedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.implementImageResolutionReceivedCompleted(this, new implementImageResolutionReceivedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/implementImageResolutionManifestingBatching", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool implementImageResolutionManifestingBatching(System.Data.DataTable dt, string newFileName, bool isManifest, bool isCombinedImage, string systemUserName) {
            object[] results = this.Invoke("implementImageResolutionManifestingBatching", new object[] {
                        dt,
                        newFileName,
                        isManifest,
                        isCombinedImage,
                        systemUserName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void implementImageResolutionManifestingBatchingAsync(System.Data.DataTable dt, string newFileName, bool isManifest, bool isCombinedImage, string systemUserName) {
            this.implementImageResolutionManifestingBatchingAsync(dt, newFileName, isManifest, isCombinedImage, systemUserName, null);
        }
        
        /// <remarks/>
        public void implementImageResolutionManifestingBatchingAsync(System.Data.DataTable dt, string newFileName, bool isManifest, bool isCombinedImage, string systemUserName, object userState) {
            if ((this.implementImageResolutionManifestingBatchingOperationCompleted == null)) {
                this.implementImageResolutionManifestingBatchingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnimplementImageResolutionManifestingBatchingOperationCompleted);
            }
            this.InvokeAsync("implementImageResolutionManifestingBatching", new object[] {
                        dt,
                        newFileName,
                        isManifest,
                        isCombinedImage,
                        systemUserName}, this.implementImageResolutionManifestingBatchingOperationCompleted, userState);
        }
        
        private void OnimplementImageResolutionManifestingBatchingOperationCompleted(object arg) {
            if ((this.implementImageResolutionManifestingBatchingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.implementImageResolutionManifestingBatchingCompleted(this, new implementImageResolutionManifestingBatchingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServerDate() {
            object[] results = this.Invoke("GetServerDate", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDateAsync() {
            this.GetServerDateAsync(null);
        }
        
        /// <remarks/>
        public void GetServerDateAsync(object userState) {
            if ((this.GetServerDateOperationCompleted == null)) {
                this.GetServerDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDateOperationCompleted);
            }
            this.InvokeAsync("GetServerDate", new object[0], this.GetServerDateOperationCompleted, userState);
        }
        
        private void OnGetServerDateOperationCompleted(object arg) {
            if ((this.GetServerDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDateCompleted(this, new GetServerDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectResolutionDescriptionCompletedEventHandler(object sender, selectResolutionDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectResolutionDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectResolutionDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectImagesCompletedEventHandler(object sender, selectImagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void implementImageResolutionReceivedCompletedEventHandler(object sender, implementImageResolutionReceivedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class implementImageResolutionReceivedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal implementImageResolutionReceivedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void implementImageResolutionManifestingBatchingCompletedEventHandler(object sender, implementImageResolutionManifestingBatchingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class implementImageResolutionManifestingBatchingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal implementImageResolutionManifestingBatchingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerDateCompletedEventHandler(object sender, GetServerDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591