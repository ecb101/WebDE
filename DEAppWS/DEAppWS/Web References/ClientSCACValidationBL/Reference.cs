//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace DEAppWS.ClientSCACValidationBL {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ClientSCACValidationBLSoap", Namespace="http://tempuri.org/")]
    public partial class ClientSCACValidationBL : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback selectClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectSCACOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateDEClientSCACOperationCompleted;
        
        private System.Threading.SendOrPostCallback overwriteClientSCACOperationCompleted;
        
        private System.Threading.SendOrPostCallback isUpdateDEClientSCACNeededOperationCompleted;
        
        private System.Threading.SendOrPostCallback isSplitBatchesOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback createIfObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ClientSCACValidationBL() {
            this.Url = global::DEAppWS.Properties.Settings.Default.DEAppWS_ClientSCACValidationBL_ClientSCACValidationBL;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event selectClientCompletedEventHandler selectClientCompleted;
        
        /// <remarks/>
        public event selectSCACCompletedEventHandler selectSCACCompleted;
        
        /// <remarks/>
        public event updateDEClientSCACCompletedEventHandler updateDEClientSCACCompleted;
        
        /// <remarks/>
        public event overwriteClientSCACCompletedEventHandler overwriteClientSCACCompleted;
        
        /// <remarks/>
        public event isUpdateDEClientSCACNeededCompletedEventHandler isUpdateDEClientSCACNeededCompleted;
        
        /// <remarks/>
        public event isSplitBatchesCompletedEventHandler isSplitBatchesCompleted;
        
        /// <remarks/>
        public event selectDetailCompletedEventHandler selectDetailCompleted;
        
        /// <remarks/>
        public event createIfObjectCompletedEventHandler createIfObjectCompleted;
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event SelectAllCompletedEventHandler SelectAllCompleted;
        
        /// <remarks/>
        public event GetServerDateCompletedEventHandler GetServerDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectClient() {
            object[] results = this.Invoke("selectClient", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectClientAsync() {
            this.selectClientAsync(null);
        }
        
        /// <remarks/>
        public void selectClientAsync(object userState) {
            if ((this.selectClientOperationCompleted == null)) {
                this.selectClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectClientOperationCompleted);
            }
            this.InvokeAsync("selectClient", new object[0], this.selectClientOperationCompleted, userState);
        }
        
        private void OnselectClientOperationCompleted(object arg) {
            if ((this.selectClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectClientCompleted(this, new selectClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectSCAC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectSCAC(string OwnerKey) {
            object[] results = this.Invoke("selectSCAC", new object[] {
                        OwnerKey});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectSCACAsync(string OwnerKey) {
            this.selectSCACAsync(OwnerKey, null);
        }
        
        /// <remarks/>
        public void selectSCACAsync(string OwnerKey, object userState) {
            if ((this.selectSCACOperationCompleted == null)) {
                this.selectSCACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectSCACOperationCompleted);
            }
            this.InvokeAsync("selectSCAC", new object[] {
                        OwnerKey}, this.selectSCACOperationCompleted, userState);
        }
        
        private void OnselectSCACOperationCompleted(object arg) {
            if ((this.selectSCACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectSCACCompleted(this, new selectSCACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateDEClientSCAC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updateDEClientSCAC(string batCtrlNum, string Owner_Key, string Vend_SCAC, string UserInitials) {
            object[] results = this.Invoke("updateDEClientSCAC", new object[] {
                        batCtrlNum,
                        Owner_Key,
                        Vend_SCAC,
                        UserInitials});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateDEClientSCACAsync(string batCtrlNum, string Owner_Key, string Vend_SCAC, string UserInitials) {
            this.updateDEClientSCACAsync(batCtrlNum, Owner_Key, Vend_SCAC, UserInitials, null);
        }
        
        /// <remarks/>
        public void updateDEClientSCACAsync(string batCtrlNum, string Owner_Key, string Vend_SCAC, string UserInitials, object userState) {
            if ((this.updateDEClientSCACOperationCompleted == null)) {
                this.updateDEClientSCACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateDEClientSCACOperationCompleted);
            }
            this.InvokeAsync("updateDEClientSCAC", new object[] {
                        batCtrlNum,
                        Owner_Key,
                        Vend_SCAC,
                        UserInitials}, this.updateDEClientSCACOperationCompleted, userState);
        }
        
        private void OnupdateDEClientSCACOperationCompleted(object arg) {
            if ((this.updateDEClientSCACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateDEClientSCACCompleted(this, new updateDEClientSCACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/overwriteClientSCAC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool overwriteClientSCAC(string batCtrlNum, string Owner_Key, string Vend_SCAC) {
            object[] results = this.Invoke("overwriteClientSCAC", new object[] {
                        batCtrlNum,
                        Owner_Key,
                        Vend_SCAC});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void overwriteClientSCACAsync(string batCtrlNum, string Owner_Key, string Vend_SCAC) {
            this.overwriteClientSCACAsync(batCtrlNum, Owner_Key, Vend_SCAC, null);
        }
        
        /// <remarks/>
        public void overwriteClientSCACAsync(string batCtrlNum, string Owner_Key, string Vend_SCAC, object userState) {
            if ((this.overwriteClientSCACOperationCompleted == null)) {
                this.overwriteClientSCACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnoverwriteClientSCACOperationCompleted);
            }
            this.InvokeAsync("overwriteClientSCAC", new object[] {
                        batCtrlNum,
                        Owner_Key,
                        Vend_SCAC}, this.overwriteClientSCACOperationCompleted, userState);
        }
        
        private void OnoverwriteClientSCACOperationCompleted(object arg) {
            if ((this.overwriteClientSCACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.overwriteClientSCACCompleted(this, new overwriteClientSCACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isUpdateDEClientSCACNeeded", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isUpdateDEClientSCACNeeded(string batCtrlNum) {
            object[] results = this.Invoke("isUpdateDEClientSCACNeeded", new object[] {
                        batCtrlNum});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isUpdateDEClientSCACNeededAsync(string batCtrlNum) {
            this.isUpdateDEClientSCACNeededAsync(batCtrlNum, null);
        }
        
        /// <remarks/>
        public void isUpdateDEClientSCACNeededAsync(string batCtrlNum, object userState) {
            if ((this.isUpdateDEClientSCACNeededOperationCompleted == null)) {
                this.isUpdateDEClientSCACNeededOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisUpdateDEClientSCACNeededOperationCompleted);
            }
            this.InvokeAsync("isUpdateDEClientSCACNeeded", new object[] {
                        batCtrlNum}, this.isUpdateDEClientSCACNeededOperationCompleted, userState);
        }
        
        private void OnisUpdateDEClientSCACNeededOperationCompleted(object arg) {
            if ((this.isUpdateDEClientSCACNeededCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isUpdateDEClientSCACNeededCompleted(this, new isUpdateDEClientSCACNeededCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isSplitBatches", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isSplitBatches(string batCtrlNum) {
            object[] results = this.Invoke("isSplitBatches", new object[] {
                        batCtrlNum});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isSplitBatchesAsync(string batCtrlNum) {
            this.isSplitBatchesAsync(batCtrlNum, null);
        }
        
        /// <remarks/>
        public void isSplitBatchesAsync(string batCtrlNum, object userState) {
            if ((this.isSplitBatchesOperationCompleted == null)) {
                this.isSplitBatchesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisSplitBatchesOperationCompleted);
            }
            this.InvokeAsync("isSplitBatches", new object[] {
                        batCtrlNum}, this.isSplitBatchesOperationCompleted, userState);
        }
        
        private void OnisSplitBatchesOperationCompleted(object arg) {
            if ((this.isSplitBatchesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isSplitBatchesCompleted(this, new isSplitBatchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectDetail(string MXXDatabase) {
            object[] results = this.Invoke("selectDetail", new object[] {
                        MXXDatabase});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectDetailAsync(string MXXDatabase) {
            this.selectDetailAsync(MXXDatabase, null);
        }
        
        /// <remarks/>
        public void selectDetailAsync(string MXXDatabase, object userState) {
            if ((this.selectDetailOperationCompleted == null)) {
                this.selectDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectDetailOperationCompleted);
            }
            this.InvokeAsync("selectDetail", new object[] {
                        MXXDatabase}, this.selectDetailOperationCompleted, userState);
        }
        
        private void OnselectDetailOperationCompleted(object arg) {
            if ((this.selectDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectDetailCompleted(this, new selectDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/createIfObject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void createIfObject(string batCtrlNum, string Owner_Key, string Vend_SCAC) {
            this.Invoke("createIfObject", new object[] {
                        batCtrlNum,
                        Owner_Key,
                        Vend_SCAC});
        }
        
        /// <remarks/>
        public void createIfObjectAsync(string batCtrlNum, string Owner_Key, string Vend_SCAC) {
            this.createIfObjectAsync(batCtrlNum, Owner_Key, Vend_SCAC, null);
        }
        
        /// <remarks/>
        public void createIfObjectAsync(string batCtrlNum, string Owner_Key, string Vend_SCAC, object userState) {
            if ((this.createIfObjectOperationCompleted == null)) {
                this.createIfObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateIfObjectOperationCompleted);
            }
            this.InvokeAsync("createIfObject", new object[] {
                        batCtrlNum,
                        Owner_Key,
                        Vend_SCAC}, this.createIfObjectOperationCompleted, userState);
        }
        
        private void OncreateIfObjectOperationCompleted(object arg) {
            if ((this.createIfObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createIfObjectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert(System.Data.DataTable dt) {
            object[] results = this.Invoke("Insert", new object[] {
                        dt});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(System.Data.DataTable dt) {
            this.InsertAsync(dt, null);
        }
        
        /// <remarks/>
        public void InsertAsync(System.Data.DataTable dt, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        dt}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Update(System.Data.DataTable dt) {
            object[] results = this.Invoke("Update", new object[] {
                        dt});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(System.Data.DataTable dt) {
            this.UpdateAsync(dt, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(System.Data.DataTable dt, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        dt}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Delete(string[] primaryKeys, string[] parametersValues) {
            object[] results = this.Invoke("Delete", new object[] {
                        primaryKeys,
                        parametersValues});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(string[] primaryKeys, string[] parametersValues) {
            this.DeleteAsync(primaryKeys, parametersValues, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(string[] primaryKeys, string[] parametersValues, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        primaryKeys,
                        parametersValues}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAll() {
            object[] results = this.Invoke("SelectAll", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllAsync() {
            this.SelectAllAsync(null);
        }
        
        /// <remarks/>
        public void SelectAllAsync(object userState) {
            if ((this.SelectAllOperationCompleted == null)) {
                this.SelectAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllOperationCompleted);
            }
            this.InvokeAsync("SelectAll", new object[0], this.SelectAllOperationCompleted, userState);
        }
        
        private void OnSelectAllOperationCompleted(object arg) {
            if ((this.SelectAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllCompleted(this, new SelectAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServerDate() {
            object[] results = this.Invoke("GetServerDate", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDateAsync() {
            this.GetServerDateAsync(null);
        }
        
        /// <remarks/>
        public void GetServerDateAsync(object userState) {
            if ((this.GetServerDateOperationCompleted == null)) {
                this.GetServerDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDateOperationCompleted);
            }
            this.InvokeAsync("GetServerDate", new object[0], this.GetServerDateOperationCompleted, userState);
        }
        
        private void OnGetServerDateOperationCompleted(object arg) {
            if ((this.GetServerDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDateCompleted(this, new GetServerDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectClientCompletedEventHandler(object sender, selectClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectSCACCompletedEventHandler(object sender, selectSCACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectSCACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectSCACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void updateDEClientSCACCompletedEventHandler(object sender, updateDEClientSCACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateDEClientSCACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateDEClientSCACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void overwriteClientSCACCompletedEventHandler(object sender, overwriteClientSCACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class overwriteClientSCACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal overwriteClientSCACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void isUpdateDEClientSCACNeededCompletedEventHandler(object sender, isUpdateDEClientSCACNeededCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isUpdateDEClientSCACNeededCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isUpdateDEClientSCACNeededCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void isSplitBatchesCompletedEventHandler(object sender, isSplitBatchesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isSplitBatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isSplitBatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectDetailCompletedEventHandler(object sender, selectDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void createIfObjectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertCompletedEventHandler(object sender, InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateCompletedEventHandler(object sender, UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SelectAllCompletedEventHandler(object sender, SelectAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerDateCompletedEventHandler(object sender, GetServerDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591