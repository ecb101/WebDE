//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3053.
// 
#pragma warning disable 1591

namespace DEAppWS.VirtualMailRoomBatchSolutionBL {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="VirtualMailRoomBatchSolutionBLSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MarshalByRefObject))]
    public partial class VirtualMailRoomBatchSolutionBL : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback selectBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectReBatchesOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectClientOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectSCACOperationCompleted;
        
        private System.Threading.SendOrPostCallback createBatchesOperationCompleted;
        
        private System.Threading.SendOrPostCallback isAllowedBatchingOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertImagesBatchedOperationCompleted;
        
        private System.Threading.SendOrPostCallback auditTrailOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback SelectAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerDateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public VirtualMailRoomBatchSolutionBL() {
            this.Url = global::DEAppWS.Properties.Settings.Default.DEAppWS_VirtualMailRoomBatchSolutionBL_VirtualMailRoomBatchSolutionBL;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event selectBatchCompletedEventHandler selectBatchCompleted;
        
        /// <remarks/>
        public event selectReBatchesCompletedEventHandler selectReBatchesCompleted;
        
        /// <remarks/>
        public event selectClientCompletedEventHandler selectClientCompleted;
        
        /// <remarks/>
        public event selectSCACCompletedEventHandler selectSCACCompleted;
        
        /// <remarks/>
        public event createBatchesCompletedEventHandler createBatchesCompleted;
        
        /// <remarks/>
        public event isAllowedBatchingCompletedEventHandler isAllowedBatchingCompleted;
        
        /// <remarks/>
        public event insertImagesBatchedCompletedEventHandler insertImagesBatchedCompleted;
        
        /// <remarks/>
        public event auditTrailCompletedEventHandler auditTrailCompleted;
        
        /// <remarks/>
        public event InsertCompletedEventHandler InsertCompleted;
        
        /// <remarks/>
        public event UpdateCompletedEventHandler UpdateCompleted;
        
        /// <remarks/>
        public event DeleteCompletedEventHandler DeleteCompleted;
        
        /// <remarks/>
        public event SelectAllCompletedEventHandler SelectAllCompleted;
        
        /// <remarks/>
        public event GetServerDateCompletedEventHandler GetServerDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectBatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectBatch() {
            object[] results = this.Invoke("selectBatch", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectBatchAsync() {
            this.selectBatchAsync(null);
        }
        
        /// <remarks/>
        public void selectBatchAsync(object userState) {
            if ((this.selectBatchOperationCompleted == null)) {
                this.selectBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectBatchOperationCompleted);
            }
            this.InvokeAsync("selectBatch", new object[0], this.selectBatchOperationCompleted, userState);
        }
        
        private void OnselectBatchOperationCompleted(object arg) {
            if ((this.selectBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectBatchCompleted(this, new selectBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectReBatches", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectReBatches() {
            object[] results = this.Invoke("selectReBatches", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectReBatchesAsync() {
            this.selectReBatchesAsync(null);
        }
        
        /// <remarks/>
        public void selectReBatchesAsync(object userState) {
            if ((this.selectReBatchesOperationCompleted == null)) {
                this.selectReBatchesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectReBatchesOperationCompleted);
            }
            this.InvokeAsync("selectReBatches", new object[0], this.selectReBatchesOperationCompleted, userState);
        }
        
        private void OnselectReBatchesOperationCompleted(object arg) {
            if ((this.selectReBatchesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectReBatchesCompleted(this, new selectReBatchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectClient", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectClient() {
            object[] results = this.Invoke("selectClient", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectClientAsync() {
            this.selectClientAsync(null);
        }
        
        /// <remarks/>
        public void selectClientAsync(object userState) {
            if ((this.selectClientOperationCompleted == null)) {
                this.selectClientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectClientOperationCompleted);
            }
            this.InvokeAsync("selectClient", new object[0], this.selectClientOperationCompleted, userState);
        }
        
        private void OnselectClientOperationCompleted(object arg) {
            if ((this.selectClientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectClientCompleted(this, new selectClientCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectSCAC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet selectSCAC(object Parameters) {
            object[] results = this.Invoke("selectSCAC", new object[] {
                        Parameters});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void selectSCACAsync(object Parameters) {
            this.selectSCACAsync(Parameters, null);
        }
        
        /// <remarks/>
        public void selectSCACAsync(object Parameters, object userState) {
            if ((this.selectSCACOperationCompleted == null)) {
                this.selectSCACOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectSCACOperationCompleted);
            }
            this.InvokeAsync("selectSCAC", new object[] {
                        Parameters}, this.selectSCACOperationCompleted, userState);
        }
        
        private void OnselectSCACOperationCompleted(object arg) {
            if ((this.selectSCACCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectSCACCompleted(this, new selectSCACCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/createBatches", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string createBatches(
                    string OwnerKey, 
                    string VendBatKey, 
                    string FBCount, 
                    bool isProduction, 
                    string CarrierName, 
                    string ICS, 
                    string imageFileName, 
                    Image imageFile, 
                    object[] stampPages, 
                    object[] pages, 
                    string stampLabel, 
                    string SCAC, 
                    bool isSplitBatch, 
                    object[] splitPoint, 
                    bool isEphesoftDrop, 
                    string imageIssue, 
                    string systemUserName) {
            object[] results = this.Invoke("createBatches", new object[] {
                        OwnerKey,
                        VendBatKey,
                        FBCount,
                        isProduction,
                        CarrierName,
                        ICS,
                        imageFileName,
                        imageFile,
                        stampPages,
                        pages,
                        stampLabel,
                        SCAC,
                        isSplitBatch,
                        splitPoint,
                        isEphesoftDrop,
                        imageIssue,
                        systemUserName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void createBatchesAsync(
                    string OwnerKey, 
                    string VendBatKey, 
                    string FBCount, 
                    bool isProduction, 
                    string CarrierName, 
                    string ICS, 
                    string imageFileName, 
                    Image imageFile, 
                    object[] stampPages, 
                    object[] pages, 
                    string stampLabel, 
                    string SCAC, 
                    bool isSplitBatch, 
                    object[] splitPoint, 
                    bool isEphesoftDrop, 
                    string imageIssue, 
                    string systemUserName) {
            this.createBatchesAsync(OwnerKey, VendBatKey, FBCount, isProduction, CarrierName, ICS, imageFileName, imageFile, stampPages, pages, stampLabel, SCAC, isSplitBatch, splitPoint, isEphesoftDrop, imageIssue, systemUserName, null);
        }
        
        /// <remarks/>
        public void createBatchesAsync(
                    string OwnerKey, 
                    string VendBatKey, 
                    string FBCount, 
                    bool isProduction, 
                    string CarrierName, 
                    string ICS, 
                    string imageFileName, 
                    Image imageFile, 
                    object[] stampPages, 
                    object[] pages, 
                    string stampLabel, 
                    string SCAC, 
                    bool isSplitBatch, 
                    object[] splitPoint, 
                    bool isEphesoftDrop, 
                    string imageIssue, 
                    string systemUserName, 
                    object userState) {
            if ((this.createBatchesOperationCompleted == null)) {
                this.createBatchesOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateBatchesOperationCompleted);
            }
            this.InvokeAsync("createBatches", new object[] {
                        OwnerKey,
                        VendBatKey,
                        FBCount,
                        isProduction,
                        CarrierName,
                        ICS,
                        imageFileName,
                        imageFile,
                        stampPages,
                        pages,
                        stampLabel,
                        SCAC,
                        isSplitBatch,
                        splitPoint,
                        isEphesoftDrop,
                        imageIssue,
                        systemUserName}, this.createBatchesOperationCompleted, userState);
        }
        
        private void OncreateBatchesOperationCompleted(object arg) {
            if ((this.createBatchesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createBatchesCompleted(this, new createBatchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isAllowedBatching", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isAllowedBatching() {
            object[] results = this.Invoke("isAllowedBatching", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isAllowedBatchingAsync() {
            this.isAllowedBatchingAsync(null);
        }
        
        /// <remarks/>
        public void isAllowedBatchingAsync(object userState) {
            if ((this.isAllowedBatchingOperationCompleted == null)) {
                this.isAllowedBatchingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisAllowedBatchingOperationCompleted);
            }
            this.InvokeAsync("isAllowedBatching", new object[0], this.isAllowedBatchingOperationCompleted, userState);
        }
        
        private void OnisAllowedBatchingOperationCompleted(object arg) {
            if ((this.isAllowedBatchingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isAllowedBatchingCompleted(this, new isAllowedBatchingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/insertImagesBatched", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool insertImagesBatched(string from, string to, string batCtrlNum, bool isCompletelyBatched) {
            object[] results = this.Invoke("insertImagesBatched", new object[] {
                        from,
                        to,
                        batCtrlNum,
                        isCompletelyBatched});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void insertImagesBatchedAsync(string from, string to, string batCtrlNum, bool isCompletelyBatched) {
            this.insertImagesBatchedAsync(from, to, batCtrlNum, isCompletelyBatched, null);
        }
        
        /// <remarks/>
        public void insertImagesBatchedAsync(string from, string to, string batCtrlNum, bool isCompletelyBatched, object userState) {
            if ((this.insertImagesBatchedOperationCompleted == null)) {
                this.insertImagesBatchedOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertImagesBatchedOperationCompleted);
            }
            this.InvokeAsync("insertImagesBatched", new object[] {
                        from,
                        to,
                        batCtrlNum,
                        isCompletelyBatched}, this.insertImagesBatchedOperationCompleted, userState);
        }
        
        private void OninsertImagesBatchedOperationCompleted(object arg) {
            if ((this.insertImagesBatchedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertImagesBatchedCompleted(this, new insertImagesBatchedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/auditTrail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void auditTrail(string ImageID, string descriptionID, string systemUserName) {
            this.Invoke("auditTrail", new object[] {
                        ImageID,
                        descriptionID,
                        systemUserName});
        }
        
        /// <remarks/>
        public void auditTrailAsync(string ImageID, string descriptionID, string systemUserName) {
            this.auditTrailAsync(ImageID, descriptionID, systemUserName, null);
        }
        
        /// <remarks/>
        public void auditTrailAsync(string ImageID, string descriptionID, string systemUserName, object userState) {
            if ((this.auditTrailOperationCompleted == null)) {
                this.auditTrailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnauditTrailOperationCompleted);
            }
            this.InvokeAsync("auditTrail", new object[] {
                        ImageID,
                        descriptionID,
                        systemUserName}, this.auditTrailOperationCompleted, userState);
        }
        
        private void OnauditTrailOperationCompleted(object arg) {
            if ((this.auditTrailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.auditTrailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert(System.Data.DataTable dt) {
            object[] results = this.Invoke("Insert", new object[] {
                        dt});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertAsync(System.Data.DataTable dt) {
            this.InsertAsync(dt, null);
        }
        
        /// <remarks/>
        public void InsertAsync(System.Data.DataTable dt, object userState) {
            if ((this.InsertOperationCompleted == null)) {
                this.InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOperationCompleted);
            }
            this.InvokeAsync("Insert", new object[] {
                        dt}, this.InsertOperationCompleted, userState);
        }
        
        private void OnInsertOperationCompleted(object arg) {
            if ((this.InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertCompleted(this, new InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Update(System.Data.DataTable dt) {
            object[] results = this.Invoke("Update", new object[] {
                        dt});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAsync(System.Data.DataTable dt) {
            this.UpdateAsync(dt, null);
        }
        
        /// <remarks/>
        public void UpdateAsync(System.Data.DataTable dt, object userState) {
            if ((this.UpdateOperationCompleted == null)) {
                this.UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOperationCompleted);
            }
            this.InvokeAsync("Update", new object[] {
                        dt}, this.UpdateOperationCompleted, userState);
        }
        
        private void OnUpdateOperationCompleted(object arg) {
            if ((this.UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompleted(this, new UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Delete(string[] primaryKeys, string[] parametersValues) {
            object[] results = this.Invoke("Delete", new object[] {
                        primaryKeys,
                        parametersValues});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteAsync(string[] primaryKeys, string[] parametersValues) {
            this.DeleteAsync(primaryKeys, parametersValues, null);
        }
        
        /// <remarks/>
        public void DeleteAsync(string[] primaryKeys, string[] parametersValues, object userState) {
            if ((this.DeleteOperationCompleted == null)) {
                this.DeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOperationCompleted);
            }
            this.InvokeAsync("Delete", new object[] {
                        primaryKeys,
                        parametersValues}, this.DeleteOperationCompleted, userState);
        }
        
        private void OnDeleteOperationCompleted(object arg) {
            if ((this.DeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompleted(this, new DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SelectAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SelectAll() {
            object[] results = this.Invoke("SelectAll", new object[0]);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SelectAllAsync() {
            this.SelectAllAsync(null);
        }
        
        /// <remarks/>
        public void SelectAllAsync(object userState) {
            if ((this.SelectAllOperationCompleted == null)) {
                this.SelectAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSelectAllOperationCompleted);
            }
            this.InvokeAsync("SelectAll", new object[0], this.SelectAllOperationCompleted, userState);
        }
        
        private void OnSelectAllOperationCompleted(object arg) {
            if ((this.SelectAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SelectAllCompleted(this, new SelectAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServerDate() {
            object[] results = this.Invoke("GetServerDate", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerDateAsync() {
            this.GetServerDateAsync(null);
        }
        
        /// <remarks/>
        public void GetServerDateAsync(object userState) {
            if ((this.GetServerDateOperationCompleted == null)) {
                this.GetServerDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerDateOperationCompleted);
            }
            this.InvokeAsync("GetServerDate", new object[0], this.GetServerDateOperationCompleted, userState);
        }
        
        private void OnGetServerDateOperationCompleted(object arg) {
            if ((this.GetServerDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerDateCompleted(this, new GetServerDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ColorPalette {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Image))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class MarshalByRefObject {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public abstract partial class Image : MarshalByRefObject {
        
        private object tagField;
        
        private ColorPalette paletteField;
        
        /// <remarks/>
        public object Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public ColorPalette Palette {
            get {
                return this.paletteField;
            }
            set {
                this.paletteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectBatchCompletedEventHandler(object sender, selectBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectReBatchesCompletedEventHandler(object sender, selectReBatchesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectReBatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectReBatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectClientCompletedEventHandler(object sender, selectClientCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectClientCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectClientCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectSCACCompletedEventHandler(object sender, selectSCACCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectSCACCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectSCACCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void createBatchesCompletedEventHandler(object sender, createBatchesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createBatchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createBatchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void isAllowedBatchingCompletedEventHandler(object sender, isAllowedBatchingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isAllowedBatchingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isAllowedBatchingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void insertImagesBatchedCompletedEventHandler(object sender, insertImagesBatchedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertImagesBatchedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertImagesBatchedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void auditTrailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertCompletedEventHandler(object sender, InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateCompletedEventHandler(object sender, UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DeleteCompletedEventHandler(object sender, DeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void SelectAllCompletedEventHandler(object sender, SelectAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SelectAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SelectAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetServerDateCompletedEventHandler(object sender, GetServerDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591